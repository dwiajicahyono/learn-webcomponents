start 17/03/2023

Web component memudahkan developer untuk membuat komponen UI

Standard : merupakan standar yang ditetapkan oleh w3c dalam pembuatan komponen yang reusable
compatibility : digunakan pada framework seperti amgular, react ataupun vue
Simple : tidak memerlukan konfigurasi khusus layaknya framework yang ada

Custom elements : Digunakan untuk membuat elemen baru 
Shadow DOM : Digunakan untuk membuat HTML element terenkapsulasi dari gangguan luar.


Custom Element 
dengan custom element kita, kita dapat mebuat struktur element yang lebih rapih lagi, dalam membuat custom element
kita menuliskannya dengan menggunakan javascript Class. 

18/03/2023
Siklus Hidup dari custom element 
kita dapat memanfaatkan lifecycle callback pada setiap logika siklus Hidup, logika tersebut antara lain :
- connectedCallback() => terpanggil jika elemen berhasil ditambahkan ke DOM
- disconnectCallback() => terpanggil jika elemen dikeluarkan (remove()) dari DOM
- attributeChangedCallback() => terpanggil jika nilai atribut yang diobserve melalui fungsi static get observedAttribute diubah
- adoptedCallback() => terpanggil jikaelemen dipindahka  pada dokumen baru.

Mengamati Nilai atribut
- name : nama dari atribut yang berubah
- old Value : Nilai pada atribut sebelum berubah
- new Value : Nilai baru yang ditetapkan pada atribut
Urutan dari ketiganya sangat penting jangan sampai tertukar

pada kode customelement1. Di dalam fungsi 
attributeChangedCallback(), kita tuliskan kode untuk mengubah 
nilai properti this[name] dengan nilai baru yang ditetapkan. 
this[name] ini merupakan cara dinamis untuk mengubah nilai 
properti sesuai dengan nama atribut yang diubah. 
Misalkan jika kita mengubah atribut “caption” maka akan 
mengubah nilai this[“caption”], jika kita mengubah atribut 
“alt” maka akan mengubah nilai this[“alt”].

Setelah mengubah nilainya lalu kita panggil fungsi render(). 
Perhatikan juga bahwa kita perlu memisahkan kode rendering HTML 
di browser pada fungsi yang terpisah (tidak dilakukan di 
connectedCallback). Tujuannya agar kita dapat memanggil fungsi 
tersebut tidak hanya sekali tapi setiap kali terdapat perubahan 
data.

Lalu terdapat juga static get observedAttributes(). 
Apa fungsinya? Fungsi getter statis ini berperan sebagai 
“seseorang” yang mengamati perubahan nilai pada atribut yang 
ditentukan. Jika terjadi perubahan, ia akan memanggil 
attributeChangedCallback dengan memberitahu nama atribut apa 
yang berubah, nilai sebelum perubahan, serta nilai baru yang 
akan ditetapkan. observedAttributes tidak akan mengamati seluruh 
atribut yang diterapkan pada custom element, hanya atribut yang 
dituliskan pada nilai kembaliannya yang akan diamati.


Menerapkan styling pada custom elemeny
Pada Custom Element tidak ada cara khusus untuk mengganti styling kita bisa menerapkan styling seperti biasa

Menangani data yang kompleks
kita dapat menggunakan render untuk menangani hal tersebut
Karena kita memanggil fungsi render() di dalam set article(), 
maka custom element tidak akan menampilkan apapun pada browser sebelum nilai article-nya ditetapkan.

21/03/2023
Nested custom element
Shadow DOM Ketika browser memuat halaman, HTML akan secara otomatis dimodelkan menjadi sebuah object dan nodes hingga membentuk “DOM Tree”. 
    -Encapsulation
Saat ini kita mungkin bisa menerapkan konsep enkapsulasi dengan menggunakan <iframe> agar
komponen terpisah dari gangguan luar. Namun teknik ini bukan cara yang baik, berat, dan dapat
menimbulkan masalah. Lantas bagaimana solusinya? Gunakanlah Shadow DOM.
Shadow DOM dapat mengisolasi sebagian struktur DOM di dalam komponen sehingga tidak dapat disentuh dari luar komponen atau nodenya. Singkatnya kita bisa sebut Shadow DOM sebagai “DOM dalam DOM”.
Shadow DOM adalah sebuah teknologi yang memungkinkan pembuatan DOM Tree baru secara terisolasi di dalam komponen dari DOM Tree yang sudah ada, 
yang disebut Shadow Host. DOM Tree yang baru tersebut dinamakan Shadow Tree, dan dimulai dari root bayangan (Shadow root). Shadow DOM memungkinkan kita untuk memanipulasi elemen di dalam Shadow Tree 
layaknya pada DOM Tree biasa, namun hanya dapat dilakukan di dalam batas yang disebut Shadow boundary. Dengan demikian, Shadow DOM dapat membuat komponen terenkapsulasi sehingga elemen di dalamnya tidak dapat diubah atau diberi gaya dari luar Shadow boundary.